{"/home/travis/build/npmtest/node-npmtest-spdy/test.js":"/* istanbul instrument in package npmtest_spdy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spdy/lib.npmtest_spdy.js":"/* istanbul instrument in package npmtest_spdy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_spdy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_spdy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-spdy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-spdy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_spdy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_spdy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_spdy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_spdy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_spdy.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_spdy.__dirname +\n                    '/lib.npmtest_spdy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spdy/spdy/lib/spdy.js":"'use strict';\n\nvar spdy = exports;\n\n// Export tools\nspdy.handle = require('./spdy/handle');\nspdy.request = require('./spdy/request');\nspdy.response = require('./spdy/response');\nspdy.Socket = require('./spdy/socket');\n\n// Export client\nspdy.agent = require('./spdy/agent');\nspdy.Agent = spdy.agent.Agent;\nspdy.createAgent = spdy.agent.create;\n\n// Export server\nspdy.server = require('./spdy/server');\nspdy.Server = spdy.server.Server;\nspdy.PlainServer = spdy.server.PlainServer;\nspdy.createServer = spdy.server.create;\n","/home/travis/build/npmtest/node-npmtest-spdy/spdy/lib/spdy/handle.js":"'use strict';\n\nvar assert = require('assert');\nvar thing = require('handle-thing');\nvar httpDeceiver = require('http-deceiver');\nvar util = require('util');\n\nfunction Handle(options, stream, socket) {\n  var state = {};\n  this._spdyState = state;\n\n  state.options = options || {};\n\n  state.stream = stream;\n  state.socket = null;\n  state.rawSocket = socket || stream.connection.socket;\n  state.deceiver = null;\n  state.ending = false;\n\n  var self = this;\n  thing.call(this, stream, {\n    getPeerName: function() {\n      return self._getPeerName();\n    },\n    close: function(callback) {\n      return self._closeCallback(callback);\n    }\n  });\n\n  if (!state.stream) {\n    this.on('stream', function(stream) {\n      state.stream = stream;\n    });\n  }\n}\nutil.inherits(Handle, thing);\nmodule.exports = Handle;\n\nHandle.create = function create(options, stream, socket) {\n  return new Handle(options, stream, socket);\n};\n\nHandle.prototype._getPeerName = function _getPeerName() {\n  var state = this._spdyState;\n\n  if (state.rawSocket._getpeername)\n    return state.rawSocket._getpeername();\n\n  return null;\n};\n\nHandle.prototype._closeCallback = function _closeCallback(callback) {\n  var state = this._spdyState;\n  var stream = state.stream;\n\n  if (state.ending) {\n    // The .end() method of the stream may be called by us or by the\n    // .shutdown() method in our super-class. If the latter has already been\n    // called, then calling the .end() method below will have no effect, with\n    // the result that the callback will never get executed, leading to an ever\n    // so subtle memory leak.\n    if (stream._writableState.finished) {\n      // NOTE: it is important to call `setImmediate` instead of `nextTick`,\n      // since this is how regular `handle.close()` works in node.js core.\n      //\n      // Using `nextTick` will lead to `net.Socket` emitting `close` before\n      // `end` on UV_EOF. This results in aborted request without `end` event.\n      setImmediate(callback);\n    } else if (stream._writableState.ending) {\n      stream.once('finish', function() {\n        callback(null);\n      });\n    } else {\n      stream.end(callback);\n    }\n  } else {\n    stream.abort(callback);\n  }\n\n  // Only a single end is allowed\n  state.ending = false;\n};\n\nHandle.prototype.getStream = function getStream(callback) {\n  var state = this._spdyState;\n\n  if (!callback) {\n    assert(state.stream);\n    return state.stream;\n  }\n\n  if (state.stream) {\n    process.nextTick(function() {\n      callback(state.stream);\n    });\n    return;\n  }\n\n  this.on('stream', callback);\n};\n\nHandle.prototype.assignSocket = function assignSocket(socket, options) {\n  var state = this._spdyState;\n\n  state.socket = socket;\n  state.deceiver = httpDeceiver.create(socket, options);\n\n  function onStreamError(err) {\n    state.socket.emit('error', err);\n  }\n\n  this.getStream(function(stream) {\n    stream.on('error', onStreamError);\n  });\n};\n\nHandle.prototype.assignClientRequest = function assignClientRequest(req) {\n  var state = this._spdyState;\n  var oldEnd = req.end;\n  var oldSend = req._send;\n\n  // Catch the headers before request will be sent\n  var self = this;\n\n  // For old nodes\n  if (thing.mode !== 'modern') {\n    req.end = function end() {\n      this.end = oldEnd;\n\n      this._send('');\n\n      return this.end.apply(this, arguments);\n    };\n  }\n\n  req._send = function send(data) {\n    this._headerSent = true;\n\n    // for v0.10 and below, otherwise it will set `hot = false` and include\n    // headers in first write\n    this._header = 'ignore me';\n\n    // To prevent exception\n    this.connection = state.socket;\n\n    // It is very important to leave this here, otherwise it will be executed\n    // on a next tick, after `_send` will perform write\n    self.getStream(function(stream) {\n      stream.send();\n    });\n\n    // We are ready to create stream\n    self.emit('needStream');\n\n    req._send = oldSend;\n\n    // Ignore empty writes\n    if (req.method === 'GET' && data.length === 0)\n      return;\n\n    return req._send.apply(this, arguments);\n  };\n\n  // No chunked encoding\n  req.useChunkedEncodingByDefault = false;\n\n  req.on('finish', function() {\n    req.socket.end();\n  });\n};\n\nHandle.prototype.assignRequest = function assignRequest(req) {\n  // Emit trailing headers\n  this.getStream(function(stream) {\n    stream.on('headers', function(headers) {\n      req.emit('trailers', headers);\n    });\n  });\n};\n\nHandle.prototype.assignResponse = function assignResponse(res) {\n  var self = this;\n\n  res.addTrailers = function addTrailers(headers) {\n    self.getStream(function(stream) {\n      stream.sendHeaders(headers);\n    });\n  };\n};\n\nHandle.prototype._transformHeaders = function _transformHeaders(kind, headers) {\n  var state = this._spdyState;\n\n  var res = {};\n  var keys = Object.keys(headers);\n\n  if (kind === 'request' && state.options['x-forwarded-for']) {\n    var xforwarded = state.stream.connection.getXForwardedFor();\n    if (xforwarded !== null)\n      res['x-forwarded-for'] = xforwarded;\n  }\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = headers[key];\n\n    if (key === ':authority')\n      res.host = value;\n    if (/^:/.test(key))\n      continue;\n\n    res[key] = value;\n  }\n  return res;\n};\n\nHandle.prototype.emitRequest = function emitRequest() {\n  var state = this._spdyState;\n  var stream = state.stream;\n\n  state.deceiver.emitRequest({\n    method: stream.method,\n    path: stream.path,\n    headers: this._transformHeaders('request', stream.headers)\n  });\n};\n\nHandle.prototype.emitResponse = function emitResponse(status, headers) {\n  var state = this._spdyState;\n\n  state.deceiver.emitResponse({\n    status: status,\n    headers: this._transformHeaders('response', headers)\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-spdy/spdy/lib/spdy/request.js":"'use strict';\n\nfunction attachPush(req) {\n  var handle = req.socket._handle;\n\n  handle.getStream(function(stream) {\n    stream.on('pushPromise', function(push) {\n      req.emit('push', push);\n    });\n  });\n}\n\nexports.onNewListener = function onNewListener(type) {\n  var req = this;\n\n  if (type !== 'push')\n    return;\n\n  // Not first listener\n  if (req.listeners('push').length !== 0)\n    return;\n\n  if (!req.socket) {\n    req.on('socket', function() {\n      attachPush(req);\n    });\n    return;\n  }\n\n  attachPush(req);\n};\n","/home/travis/build/npmtest/node-npmtest-spdy/spdy/lib/spdy/response.js":"'use strict';\n\n// NOTE: Mostly copy paste from node\nexports.writeHead = function writeHead(statusCode, reason, obj) {\n  var headers;\n\n  if (typeof reason === 'string') {\n    // writeHead(statusCode, reasonPhrase[, headers])\n    this.statusMessage = reason;\n  } else {\n    // writeHead(statusCode[, headers])\n    this.statusMessage =\n      this.statusMessage || 'unknown';\n    obj = reason;\n  }\n  this.statusCode = statusCode;\n\n  if (this._headers) {\n    // Slow-case: when progressive API and header fields are passed.\n    if (obj) {\n      var keys = Object.keys(obj);\n      for (var i = 0; i < keys.length; i++) {\n        var k = keys[i];\n        if (k) this.setHeader(k, obj[k]);\n      }\n    }\n    // only progressive api is used\n    headers = this._renderHeaders();\n  } else {\n    // only writeHead() called\n    headers = obj;\n  }\n\n  if (statusCode === 204 || statusCode === 304 ||\n      (100 <= statusCode && statusCode <= 199)) {\n    // RFC 2616, 10.2.5:\n    // The 204 response MUST NOT include a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.3.5:\n    // The 304 response MUST NOT contain a message-body, and thus is always\n    // terminated by the first empty line after the header fields.\n    // RFC 2616, 10.1 Informational 1xx:\n    // This class of status code indicates a provisional response,\n    // consisting only of the Status-Line and optional headers, and is\n    // terminated by an empty line.\n    this._hasBody = false;\n  }\n\n  // don't keep alive connections where the client expects 100 Continue\n  // but we sent a final status; they may put extra bytes on the wire.\n  if (this._expect_continue && !this._sent100) {\n    this.shouldKeepAlive = false;\n  }\n\n  // Implicit headers sent!\n  this._header = true;\n  this._headerSent = true;\n\n  if (this.socket._handle)\n    this.socket._handle._spdyState.stream.respond(this.statusCode, headers);\n};\n\nexports.end = function end(data, encoding, callback) {\n  if (!this._headerSent)\n    this.writeHead(this.statusCode);\n\n  if (!this.socket._handle)\n    return;\n\n  // Compatibility with Node.js core\n  this.finished = true;\n\n  var self = this;\n  var handle = this.socket._handle;\n  handle._spdyState.ending = true;\n  this.socket.end(data, encoding, function() {\n    self.constructor.prototype.end.call(self, '', 'utf8', callback);\n  });\n};\n\nexports.push = function push(path, headers, callback) {\n  var frame = {\n    path: path,\n    method: headers.method ? headers.method.toString() : 'GET',\n    status: headers.status ? parseInt(headers.status, 10) : 200,\n    host: this._req.headers.host,\n    headers: headers.request,\n    response: headers.response\n  };\n\n  var stream = this.spdyStream;\n  return stream.pushPromise(frame, callback);\n};\n\nexports.writeContinue = function writeContinue(callback) {\n  if (this.socket._handle)\n    this.socket._handle._spdyState.stream.respond(100, {}, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-spdy/spdy/lib/spdy/socket.js":"'use strict';\n\nvar util = require('util');\nvar net = require('net');\n\nfunction Socket(parent, options) {\n  net.Socket.call(this, options);\n\n  var state = {};\n\n  this._spdyState = state;\n\n  state.parent = parent;\n\n  this.servername = parent.servername;\n  this.npnProtocol = parent.npnProtocol;\n  this.alpnProtocol = parent.alpnProtocol;\n  this.authorized = parent.authorized;\n  this.authorizationError = parent.authorizationError;\n  this.encrypted = true;\n}\nutil.inherits(Socket, net.Socket);\n\nmodule.exports = Socket;\n\nvar methods = [\n  'renegotiate', 'setMaxSendFragment', 'getTLSTicket', 'setServername',\n  'setSession', 'getPeerCertificate', 'getSession', 'isSessionReused',\n  'getCipher', 'getEphemeralKeyInfo'\n];\n\nmethods.forEach(function(method) {\n  Socket.prototype[method] = function methodWrap() {\n    var parent = this._spdyState.parent;\n    return parent[method].apply(parent, arguments);\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-spdy/spdy/lib/spdy/agent.js":"'use strict';\n\nvar assert = require('assert');\nvar http = require('http');\nvar https = require('https');\nvar net = require('net');\nvar util = require('util');\nvar transport = require('spdy-transport');\nvar debug = require('debug')('spdy:client');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar spdy = require('../spdy');\n\nvar mode = /^v0\\.8\\./.test(process.version) ? 'rusty' :\n           /^v0\\.(9|10)\\./.test(process.version) ? 'old' :\n           /^v0\\.12\\./.test(process.version) ? 'normal' :\n           'modern';\n\nvar proto = {};\n\nfunction instantiate(base) {\n  function Agent(options) {\n    this._init(base, options);\n  }\n  util.inherits(Agent, base);\n\n  Agent.create = function create(options) {\n    return new Agent(options);\n  };\n\n  Object.keys(proto).forEach(function(key) {\n    Agent.prototype[key] = proto[key];\n  });\n\n  return Agent;\n}\n\nproto._init = function _init(base, options) {\n  base.call(this, options);\n\n  var state = {};\n  this._spdyState = state;\n\n  state.host = options.host;\n  state.options = options.spdy || {};\n  state.secure = this instanceof https.Agent;\n  state.fallback = false;\n  state.createSocket = this._getCreateSocket();\n  state.socket = null;\n  state.connection = null;\n\n  // No chunked encoding\n  this.keepAlive = false;\n\n  var self = this;\n  this._connect(options, function(err, connection) {\n    if (err)\n      return self.emit('error', err);\n\n    state.connection = connection;\n    self.emit('_connect');\n  });\n};\n\nproto._getCreateSocket = function _getCreateSocket() {\n  // Find super's `createSocket` method\n  var createSocket;\n  var cons = this.constructor.super_;\n  do {\n    createSocket = cons.prototype.createSocket;\n\n    if (cons.super_ === EventEmitter || !cons.super_)\n      break;\n    cons = cons.super_;\n  } while (!createSocket);\n  if (!createSocket)\n    createSocket = http.Agent.prototype.createSocket;\n\n  assert(createSocket, '.createSocket() method not found');\n\n  return createSocket;\n};\n\nproto._connect = function _connect(options, callback) {\n  var state = this._spdyState;\n\n  var protocols = state.options.protocols || [\n    'h2',\n    'spdy/3.1', 'spdy/3', 'spdy/2',\n    'http/1.1', 'http/1.0'\n  ];\n\n  // TODO(indutny): reconnect automatically?\n  var socket = this.createConnection(util._extend({\n    NPNProtocols: protocols,\n    ALPNProtocols: protocols,\n    servername: options.servername || options.host\n  }, options));\n  state.socket = socket;\n\n  socket.setNoDelay(true);\n\n  function onError(err) {\n    return callback(err);\n  }\n  socket.on('error', onError);\n\n  socket.on(state.secure ? 'secureConnect' : 'connect', function() {\n    socket.removeListener('error', onError);\n\n    var protocol;\n    if (state.secure) {\n      protocol = socket.npnProtocol ||\n                 socket.alpnProtocol ||\n                 state.options.protocol;\n    } else {\n      protocol = state.options.protocol;\n    }\n\n    // HTTP server - kill socket and switch to the fallback mode\n    if (!protocol || protocol === 'http/1.1' || protocol === 'http/1.0') {\n      debug('activating fallback');\n      socket.destroy();\n      state.fallback = true;\n      return;\n    }\n\n    debug('connected protocol=%j', protocol);\n    var connection = transport.connection.create(socket, util._extend({\n      protocol: /spdy/.test(protocol) ? 'spdy' : 'http2',\n      isServer: false\n    }, state.options.connection || {}));\n\n    // Set version when we are certain\n    if (protocol === 'h2') {\n      connection.start(4);\n    } else if (protocol === 'spdy/3.1') {\n      connection.start(3.1);\n    } else if (protocol === 'spdy/3') {\n      connection.start(3);\n    } else if (protocol === 'spdy/2') {\n      connection.start(2);\n    } else {\n      socket.destroy();\n      callback(new Error('Unexpected protocol: ' + protocol));\n      return;\n    }\n\n    if (state.options['x-forwarded-for'] !== undefined)\n      connection.sendXForwardedFor(state.options['x-forwarded-for']);\n\n    callback(null, connection);\n  });\n};\n\nproto._createSocket = function _createSocket(req, options, callback) {\n  var state = this._spdyState;\n  if (state.fallback)\n    return state.createSocket(req, options);\n\n  var handle = spdy.handle.create(null, null, state.socket);\n\n  var socketOptions = {\n    handle: handle,\n    allowHalfOpen: true\n  };\n\n  var socket;\n  if (state.secure)\n    socket = new spdy.Socket(state.socket, socketOptions);\n  else\n    socket = new net.Socket(socketOptions);\n\n  handle.assignSocket(socket);\n  handle.assignClientRequest(req);\n\n  // Create stream only once `req.end()` is called\n  var self = this;\n  handle.once('needStream', function() {\n    if (state.connection === null) {\n      self.once('_connect', function() {\n        handle.setStream(self._createStream(req, handle));\n      });\n    } else {\n      handle.setStream(self._createStream(req, handle));\n    }\n  });\n\n  // Yes, it is in reverse\n  req.on('response', function(res) {\n    handle.assignRequest(res);\n  });\n  handle.assignResponse(req);\n\n  // Handle PUSH\n  req.addListener('newListener', spdy.request.onNewListener);\n\n  // For v0.8\n  socket.readable = true;\n  socket.writable = true;\n\n  if (callback)\n    return callback(null, socket);\n\n  return socket;\n};\n\nif (mode === 'modern' || mode === 'normal') {\n  proto.createSocket = proto._createSocket;\n} else {\n  proto.createSocket = function createSocket(name, host, port, addr, req) {\n    var state = this._spdyState;\n    if (state.fallback)\n      return state.createSocket(name, host, port, addr, req);\n\n    return this._createSocket(req, {\n      host: host,\n      port: port\n    });\n  };\n}\n\nproto._createStream = function _createStream(req, handle) {\n  var state = this._spdyState;\n\n  var self = this;\n  return state.connection.reserveStream({\n    method: req.method,\n    path: req.path,\n    headers: req._headers,\n    host: state.host\n  }, function(err, stream) {\n    if (err)\n      return self.emit('error', err);\n\n    stream.on('response', function(status, headers) {\n      handle.emitResponse(status, headers);\n    });\n  });\n};\n\n// Public APIs\n\nproto.close = function close(callback) {\n  var state = this._spdyState;\n\n  if (state.connection === null) {\n    this.once('_connect', function() {\n      this.close(callback);\n    });\n    return;\n  }\n\n  state.connection.end(callback);\n};\n\nexports.Agent = instantiate(https.Agent);\nexports.PlainAgent = instantiate(http.Agent);\n\nexports.create = function create(base, options) {\n  if (typeof base === 'object') {\n    options = base;\n    base = null;\n  }\n\n  if (base)\n    return instantiate(base).create(options);\n\n  if (options.spdy && options.spdy.plain)\n    return exports.PlainAgent.create(options);\n  else\n    return exports.Agent.create(options);\n};\n","/home/travis/build/npmtest/node-npmtest-spdy/spdy/lib/spdy/server.js":"'use strict';\n\nvar assert = require('assert');\nvar https = require('https');\nvar http = require('http');\nvar tls = require('tls');\nvar net = require('net');\nvar util = require('util');\nvar selectHose = require('select-hose');\nvar transport = require('spdy-transport');\nvar debug = require('debug')('spdy:server');\nvar EventEmitter = require('events').EventEmitter;\n\nvar spdy = require('../spdy');\n\nvar proto = {};\n\nfunction instantiate(base) {\n  function Server(options, handler) {\n    this._init(base, options, handler);\n  }\n  util.inherits(Server, base);\n\n  Server.create = function create(options, handler) {\n    return new Server(options, handler);\n  };\n\n  Object.keys(proto).forEach(function(key) {\n    Server.prototype[key] = proto[key];\n  });\n\n  return Server;\n}\n\nproto._init = function _init(base, options, handler) {\n  var state = {};\n  this._spdyState = state;\n\n  state.options = options.spdy || {};\n\n  var protocols = state.options.protocols || [\n    'h2',\n    'spdy/3.1', 'spdy/3', 'spdy/2',\n    'http/1.1', 'http/1.0'\n  ];\n\n  var actualOptions = util._extend({\n    NPNProtocols: protocols,\n\n    // Future-proof\n    ALPNProtocols: protocols\n  }, options);\n\n  state.secure = this instanceof tls.Server;\n\n  if (state.secure)\n    base.call(this, actualOptions);\n  else\n    base.call(this);\n\n  // Support HEADERS+FIN\n  this.httpAllowHalfOpen = true;\n\n  var event = state.secure ? 'secureConnection' : 'connection';\n\n  state.listeners = this.listeners(event).slice();\n  assert(state.listeners.length > 0, 'Server does not have default listeners');\n  this.removeAllListeners(event);\n\n  if (state.options.plain)\n    this.on(event, this._onPlainConnection);\n  else\n    this.on(event, this._onConnection);\n\n  if (handler)\n    this.on('request', handler);\n\n  debug('server init secure=%d', state.secure);\n};\n\nproto._onConnection = function _onConnection(socket) {\n  var state = this._spdyState;\n\n  var protocol;\n  if (state.secure)\n    protocol = socket.npnProtocol || socket.alpnProtocol;\n\n  this._handleConnection(socket, protocol);\n};\n\nproto._handleConnection = function _handleConnection(socket, protocol) {\n  var state = this._spdyState;\n\n  if (!protocol)\n    protocol = state.options.protocol;\n\n  debug('incoming socket protocol=%j', protocol);\n\n  // No way we can do anything with the socket\n  if (!protocol || protocol === 'http/1.1' || protocol === 'http/1.0') {\n    debug('to default handler it goes');\n    return this._invokeDefault(socket);\n  }\n\n  socket.setNoDelay(true);\n\n  var connection = transport.connection.create(socket, util._extend({\n    protocol: /spdy/.test(protocol) ? 'spdy' : 'http2',\n    isServer: true\n  }, state.options.connection || {}));\n\n  // Set version when we are certain\n  if (protocol === 'http2')\n    connection.start(4);\n  else if (protocol === 'spdy/3.1')\n    connection.start(3.1);\n  else if (protocol === 'spdy/3')\n    connection.start(3);\n  else if (protocol === 'spdy/2')\n    connection.start(2);\n\n  connection.on('error', function() {\n    socket.destroy();\n  });\n\n  var self = this;\n  connection.on('stream', function(stream) {\n    self._onStream(stream);\n  });\n};\n\n// HTTP2 preface\nvar PREFACE = 'PRI * HTTP/2.0\\r\\n\\r\\nSM\\r\\n\\r\\n';\nvar PREFACE_BUFFER = new Buffer(PREFACE);\n\nfunction hoseFilter(data, callback) {\n  if (data.length < 1)\n    return callback(null, null);\n\n  // SPDY!\n  if (data[0] === 0x80)\n    return callback(null, 'spdy');\n\n  var avail = Math.min(data.length, PREFACE_BUFFER.length);\n  for (var i = 0; i < avail; i++)\n    if (data[i] !== PREFACE_BUFFER[i])\n      return callback(null, 'http/1.1');\n\n  // Not enough bytes to be sure about HTTP2\n  if (avail !== PREFACE_BUFFER.length)\n    return callback(null, null);\n\n  return callback(null, 'h2');\n}\n\nproto._onPlainConnection = function _onPlainConnection(socket) {\n  var hose = selectHose.create(socket, {}, hoseFilter);\n\n  var self = this;\n  hose.on('select', function(protocol, socket) {\n    self._handleConnection(socket, protocol);\n  });\n\n  hose.on('error', function(err) {\n    debug('hose error %j', err.message);\n    socket.destroy();\n  });\n};\n\nproto._invokeDefault = function _invokeDefault(socket) {\n  var state = this._spdyState;\n\n  for (var i = 0; i < state.listeners.length; i++)\n    state.listeners[i].call(this, socket);\n};\n\nproto._onStream = function _onStream(stream) {\n  var state = this._spdyState;\n\n  var handle = spdy.handle.create(this._spdyState.options, stream);\n\n  var socketOptions = {\n    handle: handle,\n    allowHalfOpen: true\n  };\n\n  var socket;\n  if (state.secure)\n    socket = new spdy.Socket(stream.connection.socket, socketOptions);\n  else\n    socket = new net.Socket(socketOptions);\n\n  handle.assignSocket(socket);\n\n  // For v0.8\n  socket.readable = true;\n  socket.writable = true;\n\n  this._invokeDefault(socket);\n\n  // Add lazy `checkContinue` listener, otherwise `res.writeContinue` will be\n  // called before the response object was patched by us.\n  if (stream.headers.expect !== undefined &&\n      /100-continue/i.test(stream.headers.expect) &&\n      EventEmitter.listenerCount(this, 'checkContinue') === 0) {\n    this.once('checkContinue', function(req, res) {\n      res.writeContinue();\n\n      this.emit('request', req, res);\n    });\n  }\n\n  handle.emitRequest();\n};\n\nproto.emit = function emit(event, req, res) {\n  if (event !== 'request' && event !== 'checkContinue')\n    return EventEmitter.prototype.emit.apply(this, arguments);\n\n  if (!(req.socket._handle instanceof spdy.handle)) {\n    debug('not spdy req/res');\n    req.isSpdy = false;\n    req.spdyVersion = 1;\n    res.isSpdy = false;\n    res.spdyVersion = 1;\n    return EventEmitter.prototype.emit.apply(this, arguments);\n  }\n\n  var handle = req.connection._handle;\n\n  req.isSpdy = true;\n  req.spdyVersion = handle.getStream().connection.getVersion();\n  res.isSpdy = true;\n  res.spdyVersion = req.spdyVersion;\n  req.spdyStream = handle.getStream();\n\n  debug('override req/res');\n  res.writeHead = spdy.response.writeHead;\n  res.end = spdy.response.end;\n  res.push = spdy.response.push;\n  res.writeContinue = spdy.response.writeContinue;\n  res.spdyStream = handle.getStream();\n\n  res._req = req;\n\n  handle.assignRequest(req);\n  handle.assignResponse(res);\n\n  return EventEmitter.prototype.emit.apply(this, arguments);\n};\n\nexports.Server = instantiate(https.Server);\nexports.PlainServer = instantiate(http.Server);\n\nexports.create = function create(base, options, handler) {\n  if (typeof base === 'object') {\n    handler = options;\n    options = base;\n    base = null;\n  }\n\n  if (base)\n    return instantiate(base).create(options, handler);\n\n  if (options.spdy && options.spdy.plain)\n    return exports.PlainServer.create(options, handler);\n  else\n    return exports.Server.create(options, handler);\n};\n"}